import os
from flask import Flask, request, jsonify
from flask_cors import CORS
import google.generativeai as genai
from dotenv import load_dotenv

# ‚úÖ Load environment variables
load_dotenv()

# ‚úÖ Fetch API Key securely
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# ‚úÖ Debugging - Check if API Key is loaded
if not GEMINI_API_KEY:
    raise ValueError("‚ö†Ô∏è Error: Missing GEMINI_API_KEY in .env file!")

print(f"üîç .env file loaded: {bool(GEMINI_API_KEY)}")
print(f"üîë GEMINI_API_KEY: {GEMINI_API_KEY[:5]}********")  # Hiding full key for security

# ‚úÖ Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for frontend access

# ‚úÖ Configure Google Gemini AI
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel("gemini-1.5-pro")
except Exception as e:
    print(f"‚ö†Ô∏è Error configuring Google AI: {e}")
    model = None

# ‚úÖ Home Route
@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Flask server is running! Use the /predict endpoint to chat with AI."

# ‚úÖ AI Chatbot Route
@app.route("/predict", methods=["POST"])
def predict():
    if not model:
        return jsonify({"reply": "‚ö†Ô∏è AI Model is not configured properly."}), 500

    try:
        data = request.json
        user_message = data.get("message", "").strip()

        if not user_message:
            return jsonify({"reply": "‚ö†Ô∏è Please enter a message."}), 400

        response = model.generate_content(user_message)
        return jsonify({"reply": response.text})

    except Exception as e:
        print(f"‚ùå AI Error: {e}")
        return jsonify({"reply": "‚ö†Ô∏è AI chatbot encountered an error."}), 500

# ‚úÖ Run Flask Server
if __name__ == "__main__":
    app.run(port=5000, debug=True)  # Runs on http://127.0.0.1:5000
